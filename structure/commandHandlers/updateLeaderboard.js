import { EmbedBuilder } from 'discord.js';
import { getLeaderboardChannelId, getLeaderboardMessageId, setLeaderboardMessageId, getTopSellers } from './dbUtils.js';

export default async function updateLeaderboard(client, pool) {
    const channelId = await getLeaderboardChannelId(pool);
    if (!channelId || channelId === '') {
        console.log('‚ùå –ö–∞–Ω–∞–ª –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
        return;
    }

    const topSellers = await getTopSellers(pool);

    if (!topSellers.length) {
        console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤.');
        return;
    }

    const embed = new EmbedBuilder()
        .setColor('#FFD700')
        .setTitle('üèÜ –¢–æ–ø 30 –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –∑–∞ 14 –¥–Ω–µ–π')
        .setFields(
            {
                name: '–†–∞–Ω–≥',
                value: topSellers.map((user, index) => (index + 1).toString() + '` `\n').join(''),
                inline: true,
            },
            {
                name: 'User',
                value: topSellers.map((user, index) =>  `<@${user.user_id}>` + '` `\n').join(''),
                inline: true
            },
            {
                name: 'Rating',
                value: topSellers.map((user, index) => `${user.rating.toFixed(2)}% (üëç ${user.positive_reviews} / üëé ${user.negative_reviews})` + '` `\n').join(''),
                inline: true
            }
        )
        .setFooter({ text: '–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ' });

    const channel = await client.channels.fetch(channelId);
    let messageId = await getLeaderboardMessageId(pool);

    if (messageId) {
        try {
            const message = await channel.messages.fetch(messageId);
            await message.edit({ embeds: [embed] });
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
            return;
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ...');
        }
    }

    const newMessage = await channel.send({ embeds: [embed] });
    console.log(newMessage.id);
    await setLeaderboardMessageId(pool, newMessage.id);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
}
