import {ActionRowBuilder, ButtonBuilder, ButtonStyle, MessageFlags} from "discord.js";
import {formatDateToCustomString, getActiveEvent} from "../../utils.js";

export default async function (interaction, pool, page = 1) {
    const messageIdResult = await pool.query(`SELECT * FROM settings WHERE key = 'bet_leaderboard_message_id'`);
    const channelIdResult = await pool.query(`SELECT * FROM settings WHERE key = 'bet_leaderboard_channel_id'`);

    if (channelIdResult.rows.length === 0) {
        console.error(`–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω id –¥–ª—è –∫–∞–Ω–∞–ª–∞-—Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞–≤–æ–∫!`);
        return interaction.reply({content: "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω id –¥–ª—è –∫–∞–Ω–∞–ª–∞-—Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞–≤–æ–∫!", flags: MessageFlags.Ephemeral });
    }

    const channel = await interaction.guild.channels.fetch(channelIdResult.rows[0].value);

    let messageId;

    if (messageIdResult?.rows?.length && messageIdResult?.rows[0]?.value) {
        messageId = messageIdResult.rows[0].value;
    }

    const event = await getActiveEvent(pool);
    if (!event) {
        return;
    }

    const bets = await pool.query("SELECT user_id, target, amount, odds FROM bets WHERE event_id = $1 ORDER BY amount DESC", [event.id]);

    if (bets.rowCount === 0) {
        const emptyMsg = `üé≤ **${event.name}**\nüìÖ **–°—Ç–∞–≤–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã —Å ${formatDateToCustomString(event.start_time)} –ø–æ ${formatDateToCustomString(event.end_time)}**\n\n‚ùå **–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫.**`;
        if (messageId) {
            const msg = await channel.messages.fetch(messageId);
            await msg.edit(emptyMsg);
        } else {
            const newMsg = await channel.send(emptyMsg);
            return newMsg.id;
        }
        return;
    }

    const perPage = 20;
    const totalPages = Math.ceil(bets.rowCount / perPage);
    const startIndex = (page - 1) * perPage;
    const endIndex = startIndex + perPage;
    const paginatedBets = bets.rows.slice(startIndex, endIndex);

    let embedContent = `üé≤ **${event.name}**\nüìÖ **–°—Ç–∞–≤–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã —Å ${formatDateToCustomString(event.start_time)} –ø–æ ${formatDateToCustomString(event.end_time)}**\n\n`;

    embedContent += `\nüí∞ **–¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞–≤–æ–∫ | #${event.id} | (—Å—Ç—Ä. ${page}/${totalPages})**:\n`;
    paginatedBets.forEach((bet, index) => {
        embedContent += `**${startIndex + index + 1}.** <@${bet.user_id}> –ø–æ—Å—Ç–∞–≤–∏–ª **${bet.amount}** –Ω–∞ **${bet.target}**\n`;
    });

    const row = new ActionRowBuilder();
    if (page > 1) {
        row.addComponents(
            new ButtonBuilder()
                .setCustomId(`bet_page_${page - 1}`)
                .setLabel("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
                .setStyle(ButtonStyle.Primary)
        );
    }
    if (page < totalPages) {
        row.addComponents(
            new ButtonBuilder()
                .setCustomId(`bet_page_${page + 1}`)
                .setLabel("‚û°Ô∏è –í–ø–µ—Ä—ë–¥")
                .setStyle(ButtonStyle.Primary)
        );
    }

    let isMessageExist;
    try {
        if (messageId) {
            isMessageExist = !!await channel.messages.fetch(messageId);
        }
    } catch (e) {
        console.error(`–í –∫–∞–Ω–∞–ª–µ: ${channelIdResult.rows[0].value} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${messageId}`);
    }

    if (isMessageExist) {
        if (page > 1) {
            await interaction.reply({
                content: embedContent,
                flags: MessageFlags.Ephemeral,
                components: row.components.length ? [row] : []
            });
        } else {
            const msg = await channel.messages.fetch(messageId);
            await msg.edit({ content: embedContent, components: row.components.length ? [row] : [] });
        }
    } else {
        const newMessage = await channel.send({ content: embedContent, components: row.components.length ? [row] : [] })
            .catch(e => console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è-—Ç–∞–±–ª–∏—Ü—ã –≤ –∫–∞–Ω–∞–ª –¥–ª—è —Å—Ç–∞–≤–æ–∫: ${e}`, `–ö–∞–Ω–∞–ª Id: ${channelIdResult.rows[0].value}`, channel));
        await pool.query(`UPDATE settings SET value = $1 WHERE key = 'bet_leaderboard_message_id'`, [newMessage.id]);
    }
}
