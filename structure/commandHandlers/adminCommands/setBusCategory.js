import {MessageFlags} from "discord.js";

/**
 * Sets a bus category in the system, ensuring it is a valid category channel.
 * Stores the category's ID in the database and updates existing data if necessary.
 * Replies and edits the interaction context based on the outcome of the operation.
 *
 * @param {Object} interaction - The interaction object from Discord, used to handle user commands and replies.
 * @param {Object} pool - The database connection pool for executing queries to store the bus category.
 * @return {Promise<void>} A promise that resolves when the operation is complete.
 */
export default async function setBusCategory(interaction, pool) {
    await interaction.deferReply({flags: MessageFlags.Ephemeral});
    const category = interaction.options.getChannel('category');

    if (category.type !== 4) { // 4 = –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ Discord API
        return interaction.reply({
            content: 'üö´ –í—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å **–∫–∞—Ç–µ–≥–æ—Ä–∏—é**, –∞ –Ω–µ –æ–±—ã—á–Ω—ã–π –∫–∞–Ω–∞–ª!',
            flags: MessageFlags.Ephemeral
        });
    }

    await pool.query(`
        INSERT INTO settings (key, value) VALUES ('bus_category', $1)
            ON CONFLICT (key) DO UPDATE SET value = $1;
    `, [category.id]);

    await interaction.editReply({
        content: `‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <#${category.id}> —Ç–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —Ä–µ–π–¥–æ–≤.`,
        flags: MessageFlags.Ephemeral
    });
}
