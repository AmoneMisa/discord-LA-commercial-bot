import {ActionRowBuilder, ButtonBuilder, ButtonStyle, MessageFlags} from "discord.js";
import {getActiveEvent, parseFormattedNumber} from "../../utils.js";

export default async function updateBet(interaction, pool) {
    const userId = interaction.user.id;
    const amount = parseFormattedNumber(interaction.options.getInteger("amount"));

    if (isNaN(amount)) {
        await  interaction.reply({content: "–í–≤–µ–¥—ë–Ω–Ω–æ–µ –≤–∞–º–∏ —á–∏—Å–ª–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞."});
        console.error("Update bet Incorrect amount:", amount );
        return ;
    }

    const event = await getActiveEvent(pool);
    if (!event) {
        return await interaction.reply({
            content: "‚ùå –≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ª–∏–±–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å.",
            flags: MessageFlags.Ephemeral
        });
    }

    const bet = await pool.query(`SELECT *
                                  FROM bets
                                  WHERE event_id = $1
                                    AND user_id = $2`, [event.id, interaction.user.id])
    if (!bet.rows.length) {
        await interaction.reply({content: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ.", flags: MessageFlags.Ephemeral});
        return;
    }

    if (amount <= bet.rows[0].amount) {
        return await interaction.reply({content: "‚ùå –í—ã –º–æ–∂–µ—Ç–µ —Ç–æ–ª—å–∫–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ—é —Å—Ç–∞–≤–∫—É!", flags: MessageFlags.Ephemeral});
    }

    if (amount === bet.rows[0].amount) {
        return await interaction.reply({content: "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É, —Ä–∞–≤–Ω—É—é –ø—Ä–µ–¥—ã–¥—É—â–µ–π!", flags: MessageFlags.Ephemeral});
    }

    await interaction.reply({
        content: `:bangbang: **ATTENTION**\n–ß—Ç–æ–±—ã –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ **–∫–∞–º–Ω–∏ —Å—É–¥—å–±—ã** –Ω–∞ –æ–¥–∏–Ω –∏–∑ **–±–∞–Ω–∫–æ–≤**, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –í–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.\n–ë–∞–Ω–∫ –ö—Ä–∞—Ç–æ—Å: **Xzbit**\n–ë–∞–Ω–∫ –ê–ª—å–¥–µ—Ä–∞–Ω: **QQbite**\n\n‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –í—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –µ—ë —Å ${bet.rows[0].amount} –¥–æ **${amount}**!`,
        flags: MessageFlags.Ephemeral
    });

    const settings = await pool.query("SELECT * FROM settings WHERE key = 'bet_info_private_channel_id'");
    const channelId = settings.rows[0].value;

    if (channelId) {
        const adminChannel = await interaction.guild.channels.fetch(channelId);

        await adminChannel.send({
            content: `üîî –°–æ–±—ã—Ç–∏–µ #${event.id} | **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏!**\n\n**–ò–≥—Ä–æ–∫:** <@${userId}>\n**–ù–∏–∫:** ${bet.rows[0].nickname}\n**–°–µ—Ä–≤–µ—Ä:** ${bet.rows[0].server}\n**–°—Ç–∞–≤–∫–∞:** ${amount}\n**–¶–µ–ª—å:** ${bet.rows[0].target}`,
            components: [
                new ActionRowBuilder().addComponents(
                    new ButtonBuilder().setCustomId(`bet_accept_${userId}_${event.id}_${amount}_${bet.rows[0].target}_${bet.rows[0].server}_${bet.rows[0].nickname}_update`).setLabel("‚úÖ –ü—Ä–∏–Ω—è—Ç—å").setStyle(ButtonStyle.Success),
                    new ButtonBuilder().setCustomId(`bet_reject_${userId}_${event.id}_${amount}_${bet.rows[0].target}_${bet.rows[0].server}_${bet.rows[0].nickname}_update`).setLabel("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å").setStyle(ButtonStyle.Danger)
                )
            ]
        });
    } else {
        throw new Error("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º id:", channelId);
    }
}