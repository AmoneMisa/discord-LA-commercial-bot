import {MessageFlags} from "discord.js";

export default async function (interaction, pool) {
    const messageId = interaction.options.getString("message_id");
    const achievement = interaction.options.getString("achievement");
    const channel = interaction.channel;

    try {
        // üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        const achievementCheck = await pool.query(
            `SELECT name
             FROM achievements
             WHERE name = $1`,
            [achievement]
        );

        if (achievementCheck.rowCount === 0) {
            return interaction.reply({
                content: `‚ùå –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ **${achievement}** –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`,
                flags: MessageFlags.Ephemeral,
            });
        }

        // üîç –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
        const message = await channel.messages.fetch(messageId);
        if (!message) {
            return interaction.reply({
                content: "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.",
                flags: MessageFlags.Ephemeral,
            });
        }

        // üîé –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const mentionedUsers = message.mentions.users;
        if (mentionedUsers.size === 0) {
            return interaction.reply({
                content: "‚ùå –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!",
                flags: MessageFlags.Ephemeral,
            });
        }

        let successCount = 0;
        for (const user of mentionedUsers.values()) {
            try {
                await pool.query(
                    `INSERT INTO user_achievements (user_id, name, created_at)
                     VALUES ($1, $2, NOW())
                     ON CONFLICT (user_id, name) DO NOTHING`,
                    [user.id, achievement]
                );
                successCount++;
            } catch (err) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∞—á–∏–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`, err);
            }
        }

        return interaction.reply({
            content: `‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ **${achievement}** —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ **${successCount}** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!`,
            ephemeral: false,
        });
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã achievement_give_mentions:", err);
        return interaction.reply({
            content: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã!",
            flags: MessageFlags.Ephemeral,
        });
    }
}