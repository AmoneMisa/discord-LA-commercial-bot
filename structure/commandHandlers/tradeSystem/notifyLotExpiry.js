/**
 * Notifies users about expiring lots in the inventory table.
 * Sends a message to the user to inform them that their lot will expire soon
 * and provides an option to extend the lot's duration.
 *
 * @param {Object} pool - The database connection pool used to query the inventory table.
 * @param {Object} client - The client object used to fetch user information and send messages.
 *
 * @return {Promise<void>} Resolves when the notification process for all expiring lots is complete.
 */
async function notifyLotExpiry(pool, client) {
    const expiringLots = await pool.query(`
        SELECT id, user_id, item_offer 
        FROM inventory 
        WHERE expires_at <= NOW() + INTERVAL '2 hours' 
        AND notified = FALSE
    `);

    for (const lot of expiringLots.rows) {
        const user = await client.users.fetch(lot.user_id).catch(() => null);
        if (!user) continue;

        const row = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId(`extend_lot_${lot.id}`)
                .setLabel("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 3 –¥–Ω—è")
                .setStyle(ButtonStyle.Primary)
        );

        await user.send({
            content: `‚ö†Ô∏è **–í–∞—à –ª–æ—Ç "${lot.item_offer}" –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞!**\n–ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–ª–∏—Ç—å", –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –≤ –ø—Ä–æ–¥–∞–∂–µ.`,
            components: [row]
        });

        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–≤–µ–¥–æ–º–ª—ë–Ω–Ω—ã–π
        await pool.query("UPDATE inventory SET notified = TRUE WHERE id = $1", [lot.id]);
    }
}
