import {ActionRowBuilder, MessageFlags, StringSelectMenuBuilder, TextInputStyle} from "discord.js";
import tradeStringSelectMenuHandler from "./tradeStringSelectMenuHandler.js";

export async function createTradeMessage(interaction, pool, client) {
    const tradeType = interaction.options.getSubcommand().toUpperCase(); // WTT, WTB, WTS
    const itemId = interaction.options.getString('item'); // ID –ø—Ä–µ–¥–º–µ—Ç–∞
    let activeTrades = new Map(); // userId => { tradeType, item, effects, price, ... }

    const itemData = await pool.query('SELECT * FROM items WHERE id = $1', [itemId]);
    if (!itemData.rows.length) {
        return interaction.reply({content: '‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.', flags: MessageFlags.Ephemeral});
    }

    const item = itemData.rows[0];
    let components = [];

    switch (tradeType) {
        case 'WTT': // –û–ë–ú–ï–ù
            components = await generateTradeFields(item, pool, 'exchange');
            break;
        case 'WTB': // –ü–û–ö–£–ü–ö–ê
            components = await generateTradeFields(item, pool, 'buy');
            break;
        case 'WTS': // –ü–†–û–î–ê–ñ–ê
            components = await generateTradeFields(item, pool, 'sell');
            break;
        default:
            return await interaction.reply({content: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–¥–µ–ª–∫–∏.', flags: MessageFlags.Ephemeral});
    }

    let response = await interaction.reply({
        content: `üì¶ **${tradeType}**: –í—ã –≤—ã–±—Ä–∞–ª–∏ **${item.name}**\n–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏:`,
        components,
        flags: MessageFlags.Ephemeral,
        withResponse: true
    });

    const collectorFilter = i => i.user.id === interaction.user.id;

    while (true) {
        try {
            const confirmation = await response.resource.message.awaitMessageComponent({ filter: collectorFilter, time: 60_000 });;
            let result = await tradeStringSelectMenuHandler(pool, client, activeTrades, tradeType, item, confirmation);

            if (result) {
                break;
            }
        } catch (e) {
            console.error(e);
            break;
        }
    }
}

async function generateTradeFields(item, pool, tradeType) {
    let components = [];

    if (['–û–∂–µ—Ä–µ–ª—å–µ', '–°–µ—Ä—å–≥–∞', '–ö–æ–ª—å—Ü–æ'].includes(item.name)) {
        let effectOptions = await getEffectOptions(pool, 'accessory_effects', item.name);
        effectOptions = [...new Set(effectOptions), {label:"–ù–∏—á–µ–≥–æ", value: "–Ω–∏—á–µ–≥–æ"}];
        components.push(new ActionRowBuilder().addComponents(
            new StringSelectMenuBuilder()
                .setCustomId('trade_select_1_effect_1')
                .setPlaceholder('–≠—Ñ—Ñ–µ–∫—Ç 1')
                .setOptions(effectOptions)
        ));
        components.push(new ActionRowBuilder().addComponents(
            new StringSelectMenuBuilder()
                .setCustomId('trade_select_1_effect_2')
                .setPlaceholder('–≠—Ñ—Ñ–µ–∫—Ç 2')
                .setOptions(effectOptions)
        ));
        components.push(new ActionRowBuilder().addComponents(
            new StringSelectMenuBuilder()
                .setCustomId('trade_select_1_effect_3')
                .setPlaceholder('–≠—Ñ—Ñ–µ–∫—Ç 3')
                .setOptions(effectOptions)
        ));
    }

    // üîπ –°–∞–º–æ—Ü–≤–µ—Ç—ã (—É—Ä–æ–≤–µ–Ω—å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
    if (item.category === '–°–∞–º–æ—Ü–≤–µ—Ç') {
        components.push(new ActionRowBuilder().addComponents(
            new StringSelectMenuBuilder()
                .setCustomId('trade_select_1_level')
                .setPlaceholder('–£—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Ü–≤–µ—Ç–∞')
                .addOptions({label: '5', value: '5'},
                    {label: '6', value: '6'},
                    {label: '7', value: '7'},
                    {label: '8', value: '8'},
                    {label: '9', value: '9'},
                    {label: '10', value: '10'})
        ));
    }

    // üîπ –¶–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è WTS / WTB)
    if (['buy', 'sell'].includes(tradeType)) {
        components.push(new ActionRowBuilder().addComponents(
            new StringSelectMenuBuilder()
                .setCustomId('trade_select_1_negotiable')
                .setPlaceholder('–í–æ–∑–º–æ–∂–µ–Ω –ª–∏ —Ç–æ—Ä–≥?')
                .addOptions(
                    {label: '–î–∞', value: 'true'},
                    {label: '–ù–µ—Ç', value: 'false'}
                )
        ));

        components.push(new ActionRowBuilder().addComponents(
            new StringSelectMenuBuilder()
                .setCustomId('trade_select_1_price')
                .setPlaceholder('–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å')
                .addOptions(
                    {label: '<20–∫', value: 'lt20'},
                    {label: '21–∫ < 50–∫', value: 'lt50'},
                    {label: '51–∫ < 100–∫', value: 'lt100'},
                    {label: '101–∫ < 150–∫', value: 'lt150'},
                    {label: '151–∫ < 200–∫', value: 'lt200'},
                    {label: '201–∫ < 300–∫', value: 'lt300'},
                    {label: '301–∫ < 400–∫', value: 'lt400'},
                    {label: '401–∫ < 500–∫', value: 'lt500'},
                    {label:  '500–∫+', value: 'bt500'},
                )
        ));
    }

    return components;
}

async function getEffectOptions(pool, table, category) {
    const result = await pool.query(`SELECT category, effect_name, low_bonus, mid_bonus, high_bonus
                                     FROM ${table}`);
    return result.rows
        .filter(effect => effect.category === category || effect.category === "–û–±—â–∏–µ")
        .map(effect => ({label: effect.effect_name, value: effect.effect_name}));
}