import {ActionRowBuilder, ButtonBuilder, ButtonStyle, MessageFlags} from "discord.js";
import {getActiveEvent} from "../../utils.js";

export default async function (interaction, pool) {
    const userId = interaction.user.id;
    const [, , nickname, betAmount, server] = interaction.customId.split("_");
    const target = interaction.values[0];
    const event = await getActiveEvent(pool);

    await interaction.update({
        content: `:bangbang:  **ATTENTION**\n–ß—Ç–æ–±—ã –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ **–∫–∞–º–Ω–∏ —Å—É–¥—å–±—ã** –Ω–∞ –æ–¥–∏–Ω –∏–∑ **–±–∞–Ω–∫–æ–≤**, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –í–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.\n–ë–∞–Ω–∫ –ö—Ä–∞—Ç–æ—Å: **Xzbit**\n–ë–∞–Ω–∫ –ê–ª—å–¥–µ—Ä–∞–Ω: **QQbite**\n\n‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤ **${betAmount}** —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ **${nickname}** (—Å–µ—Ä–≤–µ—Ä **${server}**) –Ω–∞ –∏–≥—Ä–æ–∫–∞ ${target} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!`,
        components: [],
        flags: MessageFlags.Ephemeral
    });

    const settings = await pool.query("SELECT * FROM settings WHERE key = 'bet_info_private_channel_id'");
    const channelId = settings.rows[0].value;

    if (channelId) {
        const adminChannel = await interaction.guild.channels.fetch(channelId);

        await adminChannel.send({
            content: `üîî –°–æ–±—ã—Ç–∏–µ #${event.id} | **–ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞!**\n\n**–ò–≥—Ä–æ–∫:** <@${userId}>\n**–ù–∏–∫:** ${nickname}\n**–°–µ—Ä–≤–µ—Ä:** ${server}\n**–°—Ç–∞–≤–∫–∞:** ${betAmount}\n**–¶–µ–ª—å:** ${target}`,
            components: [
                new ActionRowBuilder().addComponents(
                    new ButtonBuilder().setCustomId(`bet_accept_${userId}_${event.id}_${betAmount}_${target}_${server}_${nickname}`).setLabel("‚úÖ –ü—Ä–∏–Ω—è—Ç—å").setStyle(ButtonStyle.Success),
                    new ButtonBuilder().setCustomId(`bet_reject_${userId}_${event.id}_${betAmount}_${target}_${server}_${nickname}`).setLabel("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å").setStyle(ButtonStyle.Danger)
                )
            ]
        });
    } else {
        throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º id: ${channelId}`);
    }
}